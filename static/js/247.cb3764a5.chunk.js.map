{"version":3,"file":"static/js/247.cb3764a5.chunk.js","mappings":"uMAwCA,UAtCa,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACd,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,+GAESC,MAAM,sCAAD,OACYN,EADZ,sDAFd,cAERO,EAFQ,gBAKKA,EAASC,OALd,OAKRC,EALQ,OAMdN,EAAQM,EAAKP,MANC,kDAQdQ,QAAQC,IAAI,uBAAZ,MARc,0DAAH,qDAYfN,GACD,GAAE,CAACL,KAGF,4BACE,iCACCE,EAAKU,KAAI,SAAAC,GAAK,OACb,4BACE,uBAAIA,EAAMC,QACV,uCAAeD,EAAME,aACpBF,EAAMG,eACL,gBACEC,IAAG,yCAAoCJ,EAAMG,cAC7CE,IAAKL,EAAMC,SANPD,EAAMM,GADH,MAcpB,C,sBCtCD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst Cast = ({ movieId }) => {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=9c2047c90d98ec66c1e34a0e397d29c4`\n        );\n        const data = await response.json();\n        setCast(data.cast);\n      } catch (error) {\n        console.log('Error fetching cast:', error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h3>Cast</h3>\n      {cast.map(actor => (\n        <div key={actor.id}>\n          <p>{actor.name}</p>\n          <p>Character: {actor.character}</p>\n          {actor.profile_path && (\n            <img\n              src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n              alt={actor.name}\n            />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useState","cast","setCast","useEffect","fetchCast","fetch","response","json","data","console","log","map","actor","name","character","profile_path","src","alt","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}